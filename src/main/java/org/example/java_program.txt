//////////////////////////
/////// Lecture 1  ///////
//////////////////////////

1. Введение в Java - кроссплатформенность, JVM, byte code
2. IDE, Path Variable
3. Запуск и компиляция программы, HelloWorld
4. Типы данных (byte, short, char, int, long, float, double, boolean, String)
5. Приведение типов
6. Операторы в джава. +, -, /, *, %, >, <, !=, >>, <<, x++/ ++x, x--/ --x, оператор+=, приоритет операций
7. Форматирование кода
8. Что такое git. Git commit, fetch+merge, pull, push

//////////////////////////
/////// Lecture 2  ///////
//////////////////////////

1. if-else, if-else-if, ternary
2. Switch / Switch Java 17
3. for
4. while, do-while
5. continue, break, return

//////////////////////////
/////// Lecture 3  ///////
//////////////////////////

1. Массивы, инициализация, доступ к элементу, for-each, печать, двумерные массивы
2. Сложность алгоритма
3. Сортировка пузырьком  - O(n²) in the average
4. Class scanner

Временная сложность алгоритма (в худшем случае) — это функция от размера входных данных,
равная максимальному количеству элементарных операций, проделываемых алгоритмом для решения
экземпляра задачи указанного размера.

Info:
https://javarush.ru/groups/posts/1997-algoritmih-sortirovki-v-teorii-i-na-praktike

//////////////////////////
/////// Lecture 4  ///////
//////////////////////////

1. Понятие класса, объекта, конструктора, this для конструктора
2. Инициализация полей (примитивы, объекты, static поля, final поля)
3. Блоки инициализации (static / nonstatic)
4. toString()

//////////////////////////
/////// Lecture 5  ///////
//////////////////////////

1. Методы класса - static / nonstatic
2. Модификаторы доступа, getters/setters
3. Equals, hashcode
4. Порядок расположения полей, конструкторов и методов в классе
5. Records - Java 17

//////////////////////////
/////// Lecture 6  ///////
//////////////////////////

1. Понятие интерфейса, default методы, static методы, поля в интерфейсах
2. Понятие абстрактного класса
3. Абстрактные методы, переопределение методов
4. final в переменных, полях, методах, классах

//////////////////////////
/////// Lecture 7  ///////
//////////////////////////

1. Рекурсия


//////////////////////////
/////// Lecture 8  ///////
//////////////////////////

1. Рефлексия


//////////////////////////
/////// Lecture 10  ///////
//////////////////////////

1. Принципы ООП: абстракция, инкапсуляция, наследование, полиморфизм
2. JVM memory
3. StrongReference, SoftReference, WeakReference
4. Garbage collector

SoftReference - эти типы ссылок используются для более чувствительных к памяти сценариев,
поскольку они будут собираться сборщиком мусора только тогда, когда вашему приложению не хватает памяти.
SoftReference<StringBuilder> reference = new SoftReference<>(new StringBuilder());

WeakReference - скорее всего, не сохранится после следующего процесса сборки мусора.
Слабая ссылка создается следующим образом:
WeakReference<StringBuilder> reference = new WeakReference<>(new StringBuilder());

PhantomReference - используется для планирования посмертных действий по очистке,
поскольку мы точно знаем, что объекты больше не живы. Используется только с очередью ссылок,
поскольку .get()метод таких ссылок всегда будет возвращаться null.
Эти типы ссылок считаются предпочтительными для финализаторов.


//////////////////////////
/////// Lecture 11  //////
//////////////////////////

1. Аннотации - при помощи рефлексии сделать валидацию полей класса
- Все аннотации расширяют интерфейс Annotation
- RetentionPolicy:
  SOURCE - существует только в исходном коде и отбрасывается во время компиляции - пример Override
  CLASS - сохраняются в файле с расширением .class, но недоступны во время выполнения программы
  RUNTIME - сохраняются в файле с расширением .class и доступны во время выполнения программы - пример Deprecated
- Target -> ElementType.ANNOTATION_TYPE

2. Enum

//////////////////////////
/////// Lecture 12 ///////
//////////////////////////

1. Иерархия исключений (Throwable, Exception, Error, Runtime, Checked, Unchecked)
2. try-catch-finally
3. Собственные исключения
4. throw, throws (исключения в интерфейсах и наследниках)
5. Переменные за пределами блока try-catch-finally
6. Выполнение кода при исключениях (дебаг)


//////////////////////////
/////// Lecture 13 ///////
//////////////////////////

1. Потоки ввода-вывода
2. Чтение и запись файлов. FileInputStream и FileOutputStream
3. Закрытие потоков
4. Классы ByteArrayInputStream и ByteArrayOutputStream
6. Классы DataOutputStream и DataInputStream
7. Чтение и запись текстовых файлов (FileReader, FileWriter)
8. Буферизация символьных потоков. BufferedReader и BufferedWriter
10. Класс File. Работа с файлами и каталогами. Files.readString(), Files.writeString()
